/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
#define MAX_SIZE 2000
struct queue
{
    struct TreeNode* node[MAX_SIZE];
    int front;
    int rear;
};

struct queue* createQueue(void)
{
  struct queue* q = malloc(sizeof(struct queue));
  q->front = q->rear = -1;
  return q;
}

bool isEmpty(struct queue* q)
{
    if (q->rear == -1)
     return true;
    else 
     return false; 
}

int queueSize(struct queue* q)
{
    return (q->rear - q->front + 1);
}

void enqueue(struct queue* q, struct TreeNode* node)
{
    q->rear++;
    q->node[q->rear] = node;
    if (q->front == -1)
     q->front = 0;
}

struct TreeNode* dequeue(struct queue* q)
{
    struct TreeNode* node = q->node[q->front];
    q->front++;
    if (q->front > q->rear)
     q->front = q->rear = -1;
    return node; 
}

int** zigzagLevelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){

if (root == NULL)
{
    *returnSize = 0;
    **returnColumnSizes = 0;
    return NULL;
}    

struct queue* q = createQueue();
enqueue(q, root);

*returnSize = 0;
*returnColumnSizes = (int *)malloc(sizeof(int *) * MAX_SIZE);
int** ReturnValue = (int *)malloc(sizeof(int *) * MAX_SIZE);
bool leftFirst = false;

while (!isEmpty(q))
{
    int size = queueSize(q);
    (*returnColumnSizes)[*returnSize] = size;
    ReturnValue[*returnSize] = (int *)malloc(sizeof(int) * size);

    struct TreeNode* node;
    for (int i=0; i<size; i++)
    {
      if (leftFirst == false)
       node = q->node[q->front+i];  
      else
        node = q->node[q->rear-i];
      ReturnValue[*returnSize][i] = node->val;  
    }//for
    for (int i=0; i<size; i++)
    { 
      node = dequeue(q);
      if (node->left != NULL)
       enqueue(q, node->left);
      if (node->right != NULL)
       enqueue(q, node->right); 
    }//for (int i=0; i<size; i++)
    leftFirst = (leftFirst == true)?(false):(true); 
    (*returnSize)++;
}//while

return ReturnValue;
}