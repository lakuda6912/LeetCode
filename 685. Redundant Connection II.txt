/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#include <stdio.h>
#define MAX(a,b) ((a>b)?(a):(b)) 

int find(int* par, int n)
{
  if (par[n] != n)
   return find(par, par[n]);  

  return n;
}

bool union_(int* rank, int* par, int n1, int n2)
{
    int p1 = find(par, n1);
    int p2 = find(par, n2);

    if (p1 == p2)
     return false;

    if (rank[p1] > rank[p2])
    {
        par[p2] = p1;
        rank[p1] += rank[p2];
    }
    else
    {
        par[p1] = p2;
        rank[p2] += rank[p1]; 
    }
    return true;
}

bool detectCycle(int* rank, int* par, int** edges, int edgesSize, int k)
{
for (int i=0; i<edgesSize; i++)
{
    if (k == i)
     continue;
    if (!union_(rank, par, edges[i][0], edges[i][1]))
    {
        return true;
    }
}
return false;
}

int* findRedundantDirectedConnection(int** edges, int edgesSize, int* edgesColSize, int* returnSize){

int m = 0;
for (int i=0; i<edgesSize; i++)
 m = MAX(MAX(m,edges[i][0]),edges[i][1]);
fprintf(stdout,"m=%d\n",m);

int* par = calloc(m+1, sizeof(int));
int* rank = calloc(m+1, sizeof(int));
int* cycles = calloc(edgesSize, sizeof(int));
int cycleIndex = 0;

for (int i=0; i<edgesSize; i++)
{
    for (int i=0; i<m+1; i++) par[i] = i;
    for (int i=0; i<m+1; i++) rank[i] = 1;
    if (detectCycle(rank, par, edges, edgesSize, i) == false)
    {
        cycles[cycleIndex++] = i;
    }
}

//fprintf(stdout,"cycle:\n");
//for (int i=0; i<cycleIndex; i++)
// fprintf(stdout,"%d ",cycles[i]);
//fprintf(stdout,"\n");

int* indegree = calloc(m+1, sizeof(int));
for (int i=0; i<edgesSize; i++)
{
  indegree[edges[i][1]]++;
}
//fprintf(stdout,"node=%d cycleIndex=%d\n",node,cycleIndex);

for (int i=cycleIndex-1; i>=0; i--)
{
   if (indegree[edges[cycles[i]][1]] > 1)
   {
      *returnSize = 2;
      return edges[cycles[i]];
   }
}
{
   *returnSize = 2;
   return edges[cycles[cycleIndex-1]];    
}

}