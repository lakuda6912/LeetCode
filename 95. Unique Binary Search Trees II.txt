/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#include <stdio.h>

struct TreeNode** buildTree(int left, int right, int* returnSize)
{

  struct TreeNode** root;// = malloc(sizeof(struct TreeNode*));
  if (left > right)
  {
    root = malloc(sizeof(struct TreeNode*));
    root[*returnSize] = NULL;
    (*returnSize)++;
    return root;
  }

  root = malloc(sizeof(struct TreeNode*));
  for (int val=left; val<=right; val++)
  {
    int leftSize = 0;
    int rightSize = 0;
    struct TreeNode** leftTree = buildTree(left,val-1,&leftSize);
    struct TreeNode** rightTree = buildTree(val+1,right,&rightSize);
       
    root = realloc(root,sizeof(struct TreeNode*)*((*returnSize)+(leftSize*rightSize)));
    for (int i=0; i<leftSize; i++)
     for (int j=0; j<rightSize; j++)
     {
       root[*returnSize] = malloc(sizeof(struct TreeNode));
       root[*returnSize]->val = val;
       root[*returnSize]->left = leftTree[i];
       root[*returnSize]->right = rightTree[j];
       (*returnSize)++;
     }
  }
  
return root;  
}

struct TreeNode** generateTrees(int n, int* returnSize){

*returnSize = 0;
return buildTree(1, n, returnSize);
}