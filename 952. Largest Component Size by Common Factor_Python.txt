class DSU:
    def __init__(self,N):
      self.par = list(range(N))
      self.rank = [1]*N

    def find(self, p):
      if self.par[p] != p:
       return self.find(self.par[p])
      return p 

    def union(self, n1, n2):
      p1, p2 = self.find(n1), self.find(n2)
      if p1 == p2:
        return
      if self.rank[p1] > self.rank[p2]:
        self.par[p2] = p1
        self.rank[p1] += self.rank[p2]
      else: 
        self.par[p1] = p2
        self.rank[p2] += self.rank[p1]        

class Solution(object):
    def largestComponentSize(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = max(nums) + 1
        UF = DSU(n)

        for i in nums:
            for j in range(2,int(math.sqrt(i)+1)):
               if i % j == 0:
                   UF.union(i,j)
                   UF.union(i,i/j)
        re = [0] * n           
        for i in nums:
          re[UF.find(i)] += 1 
        #print(re)  
                  
        return max(re)

 
          