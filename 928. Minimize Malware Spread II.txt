#include <stdio.h>
#define MAX(a,b) ((a>b)?(a):(b))
#define MIN(a,b) ((a>b)?(b):(a))

int find(int* par, int n)
{
  if (par[n] != n)
   return find(par, par[n]);  

  return n;
}

bool union_(int* rank, int* par, int n1, int n2)
{
    int p1 = find(par, n1);
    int p2 = find(par, n2);

    if (p1 == p2)
     return false;

    if (rank[p1] >= rank[p2])
    {
        par[p2] = p1;
        rank[p1] += rank[p2];
    }
    else
    {
        par[p1] = p2;
        rank[p2] += rank[p1]; 
    }
    return true;
}

void resetUF(int* par, int* rank, int n)
{
  for (int i=0; i<n; i++)
   par[i] = i;
  for (int i=0; i<n; i++)
   rank[i] = 1;    
}

void dumpUF(int* par, int* rank, int n)
{
 fprintf(stdout,"par: ");
 for (int i=0; i<n; i++)
  fprintf(stdout,"%d ",par[i]);
 fprintf(stdout,"\n");

 fprintf(stdout,"rank: ");
 for (int i=0; i<n; i++)
  fprintf(stdout,"%d ",rank[i]);
 fprintf(stdout,"\n");
}

int minMalwareSpread(int** graph, int graphSize, int* graphColSize, int* initial, int initialSize){

int n = graphSize;
int m = initialSize;

int* par = calloc(n, sizeof(int));
int* rank = calloc(n, sizeof(int));

int* var = calloc(n, sizeof(int));
int* temp = calloc(m, sizeof(int));
int tempCnt = 0;
int minCnt = n+1;
for (int k=0; k<m; k++)
{
resetUF(par,rank,n);
for (int i=0; i<n; i++)
{
  for (int j=0; j<n; j++)
  {
    if ((graph[i][j] == 1) && (i != initial[k]) && (j != initial[k]))
     union_(rank, par, i, j);
  }
}
//dumpUF(par,rank,n);

int sum = 0;
for (int i=0; i<n; i++)
 var[i] = 0;
for (int i=0; i<m; i++)
{
  var[find(par,initial[i])] = rank[find(par,initial[i])];
}
//fprintf(stdout,"var\n"); 
//for (int i=0; i<n; i++)
//   fprintf(stdout,"%d ",var[i]);
//fprintf(stdout,"\n"); 
for (int i=0; i<n; i++)
{
  sum += var[i];
}
//fprintf(stdout,"sum=%d\n",sum);

if (sum <= minCnt)
{
  if (sum < minCnt)
   tempCnt = 0;

  minCnt = MIN(minCnt, sum); 
  
  temp[tempCnt++] = initial[k];
}

}

//fprintf(stdout,"temp: ");
int minI = n+1;
for (int i=0; i<tempCnt; i++)
{
  minI = MIN(minI, temp[i]);
  //fprintf(stdout,"%d ",temp[i]);
}
//fprintf(stdout,"\n");
return minI;

}