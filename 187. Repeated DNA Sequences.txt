/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#include <stdio.h>
#include <string.h>

#define HASH_SIZE 50021

void stringCopy(char* dst, char* src, int len)
{
 strncpy(dst, src, len);
 dst[len] = '\0';
}

long getKey(char* src, int len)
{
    long temp = 0;
    long temp1 = 0;
    for (int i=0; i<len; i++)
    {
      if (src[i] == 'A')
       temp1 = 0;
      else if (src[i] == 'C')
       temp1 = 1;
      else if (src[i] == 'G')
       temp1 = 2;
      else if (src[i] == 'T')
       temp1 = 3;
      temp = (temp << 2) + temp1;   
    }

    return temp % HASH_SIZE;
}

int checkPrime(int n)
{
  int i;
  if (n == 1 || n == 0)
  {
  return 0;
  }
  for (i = 2; i < n / 2; i++)
  {
  if (n % i == 0)
  {
    return 0;
  }
  }
  return 1;
}

int getPrime(int n)
{
  if (n % 2 == 0)
  {
  n++;
  }
  while (!checkPrime(n))
  {
  n += 2;
  }
  return n;
}

char ** findRepeatedDnaSequences(char * s, int* returnSize){

if (strlen(s) <= 10)
{
  *returnSize = 0;
  return NULL;
}

char* var = malloc(sizeof(char)*(strlen(s)+1));
char** re = malloc(sizeof(char*)*100);
long* visited = calloc(HASH_SIZE, sizeof(long));
long* dna = calloc(HASH_SIZE, sizeof(long));

int left = 0;
int right = strlen(s) - 1;
long maxKey = 0;

*returnSize = 0;
stringCopy(var, s, strlen(s));

long key;
char temp;
while (left <= right-9)
{
temp = var[left+10];
var[left+10] = '\0';

if (left == 0)
 key = getKey(&var[left],10);
else
 {
   key = ((key & 134217727) << 3) | getKey(&var[left+9],1);
   key = key % HASH_SIZE;
 } 

//if (maxKey < key)
// maxKey = key;

if (visited[key] == 0)
{
  char* ptr = strstr(&s[left+1],&var[left]);

  if (ptr != NULL)
  {
    if(dna[key] == 0)
    {
      dna[key] = 1;
      re[*returnSize] = malloc(sizeof(char)*11);
      stringCopy(re[(*returnSize)], &var[left], 10);
      (*returnSize)++;      
    }
  }
  else
  {
    visited[key] = 1;
  }
}//if (visited[key] == 0)
var[left+10] = temp;
left++;
}

//fprintf(stdout,"maxKey = %d\n",maxKey);
//fprintf(stdout,"cap = %d\n",getPrime(1048576));

return re;
}