class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        
        def dfs(i, j):
            if j == len(p):
                return i == len(s)

            if dp[i][j] == True:
              return False    
            dp[i][j] = True  

            match = i < len(s) and (s[i] == p[j] or p[j] == '.')
            if j+1 < len(p) and p[j+1] == '*':
                return dfs(i, j+2) or (match and dfs(i+1,j))

            if i < len(s) and (s[i] == p[j] or p[j] == '.'):
              return dfs(i+1,j+1)
            
            return False  

        dp = [[False] * (len(p)+1) for _ in range(len(s)+1)]
        return dfs(0, 0)      
