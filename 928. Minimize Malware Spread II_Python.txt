class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """

        def find(p):
          if parent[p] != p:
           return find(parent[p])
          return p

        def union(n1, n2):
           p1, p2 = find(n1), find(n2)
           if p1 == p2:
            return
           if rank[p1] > rank[p2]:
              parent[p2] = p1
              rank[p1] += rank[p2]
           else: 
              parent[p1] = p2
              rank[p2] += rank[p1]

        minCnt = 301
        re = list()
        for i in initial:
          n = len(graph)
          parent, rank = list(range(n)), [1]*n

          clean = set(range(n))
          clean.remove(i)
          #print('clean')
          #print(clean)
          for r, c in itertools.combinations(clean, 2):
              if graph[r][c]: union(r,c)
            
          #print('parent')    
          #print(parent)               
          #print('rank')    
          #print(rank) 

          var = [0] * n
          for j in initial:
              var[find(j)] = rank[find(j)]
          #print('var')    
          #print(var)
          
          if sum(var) < minCnt:
             re*=0
             minCnt = sum(var)
          if sum(var) <= minCnt:  
            re.append(i)
          #print(re)  

        return min(re)