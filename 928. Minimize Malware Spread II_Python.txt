class DSU:
    def __init__(self,N):
      self.par = list(range(N))
      self.rank = [1]*N

    def find(self, p):
      if self.par[p] != p:
       return self.find(self.par[p])
      return p 

    def union(self, n1, n2):
      p1, p2 = self.find(n1), self.find(n2)
      if p1 == p2:
        return False
      if self.rank[p1] > self.rank[p2]:
        self.par[p2] = p1
        self.rank[p1] += self.rank[p2]
      else: 
        self.par[p1] = p2
        self.rank[p2] += self.rank[p1]        
      return True  

class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        n = len(graph)
 
        re = [0] * n
        for i in initial:
          UF = DSU(n)

          clean = set(range(n))
          clean.remove(i)

          for r, c in itertools.combinations(clean, 2):
              if graph[r][c]: UF.union(r,c)
            
          var = [0] * n
          for j in initial:
            var[UF.find(j)] = UF.rank[UF.find(j)]

          re[i] = sum(var)
          #print(re)
          #print(var)

        return min(initial, key=lambda i: [(1 == 1) * re[i], i])

