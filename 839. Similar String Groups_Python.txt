class DSU:
    def __init__(self,N):
      self.par = list(range(N))
      self.rank = [1]*N

    def find(self, p):
      if self.par[p] != p:
       return self.find(self.par[p])
      return p 

    def union(self, n1, n2):
      p1, p2 = self.find(n1), self.find(n2)
      if p1 == p2:
        return False
      if self.rank[p1] > self.rank[p2]:
        self.par[p2] = p1
        self.rank[p1] += self.rank[p2]
      else: 
        self.par[p1] = p2
        self.rank[p2] += self.rank[p1]
      return True  

class Solution(object):
    def numSimilarGroups(self, strs):
        """
        :type strs: List[str]
        :rtype: int
        """
        def compare(s1, s2):
           diff = 0
           for i in range(len(s1)):
               if s1[i] != s2[i]:
                   diff += 1
           return True if diff <= 2 else False


        n = len(strs)
        UF = DSU(n)
        #print(compare(strs[0],strs[3]))

        for i, j in itertools.combinations(list(range(n)), 2):
          if compare(strs[i], strs[j]) == True:
            UF.union(i, j)
        #print('par: ',UF.par)
        #print('rank: ',UF.rank)    
        
        count = 0
        for i in list(range(n)):
          if i == UF.find(i):
            count += 1

        return count
        