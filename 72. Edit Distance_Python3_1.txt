class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        #word1 = "rose"
        #word2 = "ros"
        m, n = len(word1), len(word2)
        def dfs(i,j):
            if i == m and j == n:
                return 0
            elif i < m and j == n:
                return 1 + dfs(i+1,j)
            elif i == m and j < n:
                return 1 + dfs(i,j+1)

            if dp[i][j] != -1:
                return dp[i][j]
                
            dp[i][j] = m + n + 1
            if word1[i] == word2[j]:
                dp[i][j] = min(dp[i][j], dfs(i+1,j+1))
            else:
                dp[i][j] = 1 + min(dp[i][j], dfs(i+1,j), dfs(i,j+1), dfs(i+1,j+1))
            return dp[i][j] 

        #print('result:',dfs(0,0))
        dp = [[-1]*n for _ in range(m)]
        return dfs(0,0)

