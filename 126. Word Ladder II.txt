class Solution(object):
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        wordDict = defaultdict(set)
        for word in wordList:
            if word != beginWord:
                for i in range(len(word)):
                    wordDict[word[:i]+"*"+word[i+1:]].add(word)
        print(wordDict)            

        queue = deque([beginWord])
        visited = {beginWord: 1}
        parent_list = defaultdict(set)
        ans_path = []

        while queue:
            word = queue.popleft()
            if word == endWord:
                break
            for i in range(len(word)):
                for nextWord in wordDict[word[:i]+"*"+word[i+1:]]:
                    if nextWord not in visited:
                        visited[nextWord] = visited[word] + 1
                        queue.append(nextWord)
                        parent_list[nextWord].add(word) 
                    elif visited[nextWord] > visited[word]:
                        parent_list[nextWord].add(word)
        print(parent_list)                
        def dfs(word, path):
            if word == beginWord:
                ans_path.append(path[::-1])
            for nextWord in parent_list[word]:
                dfs(nextWord, path+[nextWord])                    
        dfs(endWord, [endWord])
        return ans_path
