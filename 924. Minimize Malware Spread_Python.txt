class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        def find(p):
          if parent[p] != p:
           return find(parent[p])
          return p

        def union(n1, n2):
           p1, p2 = find(n1), find(n2)
           if p1 == p2:
            return
           if rank[p1] > rank[p2]:
              parent[p2] = p1
              rank[p1] += rank[p2]
           else: 
              parent[p1] = p2
              rank[p2] += rank[p1]

        n = len(graph)
        nodes = list(range(n))
        parent, rank = list(range(n)), [1]*n
        for r, c in itertools.combinations(nodes, 2):
         if graph[r][c]: union(r,c)
        #print(parent)
        #print(rank)

        var = [0]*n
        for i in initial:
          var[find(i)] += 1
        #print(var)

        re = list()
        maxArea = 0
        for i in initial:
            if var[find(i)] == 1:
                if rank[find(i)] > maxArea:
                  re*=0
                if rank[find(i)] >= maxArea:
                  re.append(i)
                  maxArea = rank[find(i)]
        if len(re) > 0:
          return min(re)
        else:
          return min(initial)  
