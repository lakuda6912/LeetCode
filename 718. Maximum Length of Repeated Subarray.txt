#include <stdio.h>

int findLength(int* nums1, int nums1Size, int* nums2, int nums2Size){

//blute force
/*
int maxlen = 0;
int i,j;
//int len = 0;
for (i=0; i<nums1Size; i++)
{
    for (j=0; j<nums2Size; j++)
    {
        if (nums1[i] == nums2[j])
        {
         //if (j < nums2Size)
         {
          int k = 0;
          int len = 0;
          while (nums1[i+k] == nums2[j+k])
          {
           fprintf(stdout,"%d %d\n",i+k,j+k);
           len++;
           k++;
           if ((i+k >= nums1Size) || (j+k >= nums2Size))
            break;
          }
         if (len > maxlen)
         maxlen = len;
         }
        }
    }
}

return maxlen;
*/

//dynamic programming
int** dp = calloc(nums1Size, sizeof(int*));
for (int i=0; i<nums1Size; i++)
 dp[i] = calloc(nums2Size, sizeof(int));
//dp[0][0] = 0; 
int maxdp = 0;

for (int i=0; i<nums1Size; i++)
{
  for (int j=0; j<nums2Size; j++)
  {
      if (nums1[i] == nums2[j])
      {
        if ((i==0) || (j==0))
         dp[i][j] = 1;
        else if (nums1[i-1] == nums2[j-1])
         dp[i][j] = dp[i-1][j-1] + 1;
        else
         dp[i][j] = 1; 
      }
      if (dp[i][j] > maxdp)
       maxdp = dp[i][j];
      //fprintf(stdout,"%d ",dp[i][j]);
  }
  //fprintf(stdout,"\n");
}

return maxdp;//0;
}