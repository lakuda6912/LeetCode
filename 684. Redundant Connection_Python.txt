class DSU:
    def __init__(self,N):
      self.par = list(range(N))
      self.rank = [1]*N

    def find(self, p):
      if self.par[p] != p:
       return self.find(self.par[p])
      return p 

    def union(self, n1, n2):
      p1, p2 = self.find(n1), self.find(n2)
      if p1 == p2:
        return False
      if self.rank[p1] > self.rank[p2]:
        self.par[p2] = p1
        self.rank[p1] += self.rank[p2]
      else: 
        self.par[p1] = p2
        self.rank[p2] += self.rank[p1]  
      return True        

class Solution(object):
    def findRedundantConnection(self, edges):
        """
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        n = len(edges) + 1
        #print(n,edges[0][0], edges[0][1])


        UF = DSU(n)
        for i in range(n):
          if UF.union(edges[i][0],edges[i][1]) == False:
           return edges[i]