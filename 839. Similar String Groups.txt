#include <stdio.h>

int find(int* par, int n)
{
  if (par[n] != n)
   return find(par, par[n]);  

  return n;
}

bool union_(int* rank, int* par, int n1, int n2)
{
    int p1 = find(par, n1);
    int p2 = find(par, n2);

    if (p1 == p2)
     return false;

    if (rank[p1] > rank[p2])
    {
        par[p2] = p1;
        rank[p1] += rank[p2];
    }
    else
    {
        par[p1] = p2;
        rank[p2] += rank[p1]; 
    }
    return true;
}

bool strCmp(char* str1, char* str2, int len)
{
    int diff = 0;
    for (int i=0; i<len; i++)
    {
       if (str1[i] != str2[i])
        diff++;
    }
    return diff <= 2;
}

int numSimilarGroups(char ** strs, int strsSize){

int n = strsSize;

int* par = calloc(n, sizeof(int));
for (int i=0; i<n; i++)
 par[i] = i;

int* rank = calloc(n, sizeof(int));
for (int i=0; i<n; i++)
 rank[i] = 1;


for (int i=0; i<n; i++)
{
    for (int j=0; j<n; j++)
    {
        if (j == i)
         continue;
        if (strCmp(strs[i],strs[j],strlen(strs[i])))
        {
          union_(rank, par, i, j);
        } 
    }
}

/*
fprintf(stdout,"par:\n");
for (int i=0; i<n; i++)
 fprintf(stdout,"%d ",par[i]);
fprintf(stdout,"\n"); 

fprintf(stdout,"rank:\n");
for (int i=0; i<n; i++)
 fprintf(stdout,"%d ",rank[i]);
fprintf(stdout,"\n"); 
*/

int groups = 0;
for (int i=0; i<n; i++)
{
    if (find(par,i) == i)
     groups++;
}
 
return groups;

}