#include <stdio.h>
/*
int FindLocalMax(int* var, int len)
{
  int max = -1;
  for (int i=0; i<len; i++)
  {
    if (var[i] > max)
    {
     max = var[i];
    }
  }
  return max;
}
*/
int trap(int* height, int heightSize){

if (heightSize == 1)
 return 0;

int* LocalMax1 = malloc(sizeof(int) * heightSize);
int* LocalMax2 = malloc(sizeof(int) * heightSize);

int LocalMax = 0;
LocalMax1[0] = -1;
for (int i=0; i<heightSize-1; i++)
{
  if (height[i] > LocalMax)
   LocalMax = height[i];
  LocalMax1[i+1] = LocalMax;
}
/*
for (int i=0; i<heightSize; i++)
{
fprintf(stdout,"%d ",LocalMax1[i]);
}
fprintf(stdout,"\n");
*/
LocalMax = 0;
LocalMax2[heightSize-1] = -1;
for (int i=heightSize-1; i>0; i--)
{
  if (height[i] > LocalMax)
   LocalMax = height[i];
  LocalMax2[i-1] = LocalMax;
}
/*
for (int i=0; i<heightSize; i++)
{
fprintf(stdout,"%d ",LocalMax2[i]);
}
fprintf(stdout,"\n");
*/

int re = 0;
for (int i=0; i<heightSize; i++)
{
  
  //int max1 = FindLocalMax(height, i);
  int max1 = LocalMax1[i];
  if (max1 == -1) continue;

  //int max2 = FindLocalMax(&height[i+1], heightSize-1-i);
  int max2 = LocalMax2[i];
  if (max2 == -1) continue;

  int max = (max1 >= max2)?(max2):(max1);
  if (max <  height[i]) continue;

  re += max - height[i];

  //fprintf(stdout,"left=%d right=%d %d re=%d height=%d\n",max1,max2,max - height[i],re,height[i]);
}//for


return re;
}