/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#include <stdio.h>
#include <string.h>
char a = {'a','a','a'};

void backtrack(int openN, int closedN, int n, char** re, int* returnSize, char* temp, int index)
{
    //fprintf(stdout,"%d %d\n",openN,closedN);
    if ((openN == closedN) && (openN == n))
    {
      //fprintf(stdout,"%s\n",temp);
      re[*returnSize] = malloc(sizeof(char)*(2*n+1));
      strcpy(re[*returnSize], temp);
      (*returnSize)++;
      
      return;
    }
    if (openN < n)
    {
        temp[index] = '(';
        backtrack(openN+1, closedN, n, re, returnSize, temp, index+1);
    }
    if (openN > closedN)
    {
        temp[index] = ')';
        backtrack(openN, closedN+1, n, re, returnSize, temp, index+1);
    }
}

char ** generateParenthesis(int n, int* returnSize){

char** re = calloc(2000, sizeof(char*));
char* temp = calloc(2*n+1, sizeof(char));

*returnSize = 0;
backtrack(0, 0, n, re, returnSize, temp, 0);
return re;
}