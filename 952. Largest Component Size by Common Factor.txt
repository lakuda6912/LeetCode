#include <stdio.h>
class DSU {
    public:
    vector<int> par, rank;
    DSU(int n) : par(n), rank(n,1){
        iota(begin(par), end(par), 0);
    }
    int find(int p){
        if (par[p] != p)
         return find(par[p]);
        return p; 
    }
    void Union(int n1, int n2){
        int p1 = find(n1);
        int p2 = find(n2);
        if (p1 == p2) return;
        if (rank[p1] > rank[p2]){
            par[p2] = p1;
            rank[p1] += rank[p2];
        }
        else {
            par[p1] = p2;
            rank[p2] += rank[p1];
        }
    }
};

class Solution {
public:
    int largestComponentSize(vector<int>& nums) {
        int n = size(nums), ans = 1;
        DSU ds(*max_element(nums.begin(), nums.end())+1);
        unordered_map<int,int> mp;
        for (auto i : nums){
         for (int f=2; f<=sqrt(i); f++){
          if (i % f == 0){
           ds.Union(i, f);
           ds.Union(i, i/f);
          }
         }
        }
        //fprintf(stdout,"%d %d %d %d\n",ds.find(nums[0]),ds.find(nums[1]),ds.find(nums[2]),ds.find(nums[3]));
        for (int i=0; i<n; i++)
         ans = max(ans, ++mp[ds.find(nums[i])]);

        return ans;
    }
};