class Solution(object):
    def swimInWater(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        def dfs(r, c, cur):
            if r < 0 or r > n-1 or c < 0 or c > n-1 or max(cur,grid[r][c]) >= dp[r][c]: 
                return 0
            #print(r,c,dp[r][c])    
            dp[r][c] = max(cur, grid[r][c])
            direc = [(1, 0),(-1, 0),(0, 1),(0, -1)]
            for d in direc:
              dfs(r+d[0],c+d[1],dp[r][c])

        n = len(grid)
        dp = [[10000]*n for _ in range(n)]
        #print(dp)
        dfs(0,0,grid[0][0])
        #print(dp)
        return dp[n-1][n-1]

