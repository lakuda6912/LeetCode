/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
#define MAX_SIZE 2000 

struct queue {
    struct TreeNode *node[MAX_SIZE];
    int front;
    int rear;
};

struct queue* createQueue(void)
{
  struct queue *q = malloc(sizeof(struct queue));
  q->front = q->rear = -1;
  return q;
}

bool isEmpty(struct queue* q)
{
    if (q->rear == -1)
     return true;
    else
     return false; 
}

int queueSize(struct queue* q)
{
    return (q->rear - q->front + 1);
}

void enqueue(struct queue* q, struct TreeNode* node)
{
  q->rear++;
  q->node[q->rear] = node;
  if (q->front == -1)
   q->front = 0;
}

struct TreeNode* dequeue(struct queue* q)
{
  struct TreeNode* node = q->node[q->front];
  q->front++; 
  if (q->front > q->rear)
   q->front = q->rear = -1;
  return node; 
}

int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){

// Empty tree
if (root == NULL)
{
    *returnSize = 0;
    *returnColumnSizes = NULL;
    return NULL;
}


/*
*returnSize = 0;
//
//Can not do since it is valid and passed
*returnColumnSizes = (int *)malloc(sizeof(int *));
(*returnColumnSizes)[*returnSize] = 4;

int **returnValue;
returnValue = (int *)malloc(sizeof(int *));
returnValue[*returnSize]  = (int *)malloc(sizeof(int)*4);
returnValue[*returnSize][0] = 2;
returnValue[*returnSize][1] = 2;
returnValue[*returnSize][2] = 2;
returnValue[*returnSize][3] = 2;

(*returnSize)++;

*returnColumnSizes = (int *)realloc(*returnColumnSizes, sizeof(int *) * (*returnSize + 1));
(*returnColumnSizes)[*returnSize] = 4;

returnValue = (int *)realloc(returnValue, sizeof(int *) * (*returnSize + 1));
returnValue[*returnSize]  = (int *)malloc(sizeof(int)*4);
returnValue[*returnSize][0] = 3;
returnValue[*returnSize][1] = 3;
returnValue[*returnSize][2] = 3;
returnValue[*returnSize][3] = 3;

(*returnSize)++;
*/


*returnSize = 0;

struct queue* q = createQueue();
enqueue(q, root);
int size;

*returnColumnSizes = (int *)malloc(sizeof(int *)*MAX_SIZE);
int** returnValue = (int *)malloc(sizeof(int *)*MAX_SIZE);

while (!isEmpty(q))
{
 size = queueSize(q); 
 (*returnColumnSizes)[*returnSize] = size;
 returnValue[*returnSize]  = (int *)malloc(sizeof(int) * size);

 for (int i=0; i<size; i++)
 {
   struct TreeNode* node = dequeue(q);
   returnValue[*returnSize][i] = node->val;

   if (node->left != NULL)
    enqueue(q, node->left);
   if (node->right != NULL)
    enqueue(q, node->right);
 }//for
 (*returnSize)++;
}//while  

return returnValue;
}