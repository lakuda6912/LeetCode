#include <stdio.h>
struct queue
{
  char* words[10000];
  int front;
  int rear;
};

struct queue* createQueue(void)
{
  struct queue* q = malloc(sizeof(struct queue));
  q->front = q->rear = -1;
  return q;
}

bool isEmpty(struct queue* q)
{
  if (q->rear == -1)
   return true;
  else
   return false; 
}

int queueSize(struct queue* q)
{
  return (q->rear - q->front + 1);
}

void enqueue(struct queue* q, char* word)
{
  q->rear++;
  q->words[q->rear] = word;
  if (q->front == -1)
   q->front = 0;
}

char* dequeue(struct queue* q)
{
  char* word = q->words[q->front];
  q->front++;
  if (q->front > q->rear)
   q->front = q->rear = -1;
  return word; 
}

int stringDiff(char* word1, char* word2)
{
  int re = 0;
  int len = strlen(word1);
  for (int i=0; i<len; i++)
  {
    if (word1[i] == word2[i])
    {
      re++;
    }
  }
  return (len - re);  
}

int ladderLength(char * beginWord, char * endWord, char ** wordList, int wordListSize){

struct queue* q = createQueue();
enqueue(q, beginWord);

#define MAX_VALUE 10000
int index1 = 0;
int index2 = MAX_VALUE;

int* touch = malloc(sizeof(int)*wordListSize);
for (int i=0; i<wordListSize; i++)
 touch[i] = 0;

while (!isEmpty(q))
//for (int k=0; k<10; k++)
{
  int size = queueSize(q);

  index1++; //number of words in the transformation sequence
  //fprintf(stdout, "level = %d queueSize = %d\n", index1, size);
  for (int i=0; i<size; i++)
  {
    char* word = dequeue(q);
    //fprintf(stdout, "%s ", word);

    //remove the word from wordList except endWord
    for (int j=0; j<wordListSize; j++)
    {
     if (
         (strcmp(word,wordList[j]) == 0) && 
         (strcmp(word,endWord) != 0)
        ) 
     {
      touch[j] = 1;
     }//if
    }//for

   //enqueue the word if differed by one char
   for (int j=0; j<wordListSize; j++)
   {
    //Compare the word to endWord
    if (strcmp(word, endWord) == 0)
    {
      if (index1 < index2)
       index2 = index1;
    }//if

    //enqueue the word
    if (
        ((stringDiff(word, wordList[j])) == 1) &&
        (touch[j] == 0)
       )
    {
     //fprintf(stdout, "%s ", wordList[j]); 
     enqueue(q, wordList[j]);
     touch[j] = 1;
     }//if
   }//for
  }//for
  //fprintf(stdout, "\n");
}//while

index2 = (index2 == MAX_VALUE)?(0):(index2);
return index2;
}