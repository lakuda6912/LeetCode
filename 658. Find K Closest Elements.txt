/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#include <stdio.h> 
int* findClosestElements(int* arr, int arrSize, int k, int x, int* returnSize){

int left = 0;
int right = arrSize - 1;
int middle = (arrSize - 1)/2;
int* re = calloc(k, sizeof(int));
*returnSize = 0;
int cnt = 0;
while (left < right)
{
    //fprintf(stdout,"%d %d %d\n",left,middle,right);
    if (right-left <= 1)
    {
        if (arr[left] == x)
        {
            re[*returnSize] = x;
            (*returnSize)++;
            left = left - 1;
            right = left + 1;
            cnt = 1;
        }
        else if (arr[right] == x)
        {
            re[*returnSize] = x;
            (*returnSize)++;
            right = right + 1;
            cnt = 1;
        }
        //else if ((arr[left] < x) && (arr[right] > x))
        //{
        //    
        //}
        else if (arr[left] > x)
        {
          left = -1;
          right = 0;
        }
        else if (arr[right] < x)
        {
          left = arrSize-1;
          right = arrSize;
        }         
        break; 
    }

    if (arr[middle] < x)
     left = middle;
    else if (arr[middle] > x)
     right = middle;
    else if (arr[middle] == x)
    {
     re[*returnSize] = x;
     (*returnSize)++;
     left = middle - 1;
     right = middle + 1;
     cnt = 1;
     break;
    }
    middle = (right + left)/2;
}
//fprintf(stdout,"left=%d right=%d\n",left,right);

while (cnt < k)
{
  //fprintf(stdout,"%d %d\n",left,right);
  if ((left < 0) && (right <= arrSize-1))
  {
   re[*returnSize] = arr[right];
   (*returnSize)++;
   right++;      
  }
  else if ((left >= 0) && (right > arrSize-1))
  {
   re[*returnSize] = arr[left];
   (*returnSize)++;
   left--;      
  }
  else if (abs(arr[left]-x) < abs(arr[right]-x))
  {
   re[*returnSize] = arr[left];
   (*returnSize)++;
   left--;
  }
  else if (abs(arr[left]-x) > abs(arr[right]-x))
  {
   re[*returnSize] = arr[right];
   (*returnSize)++;
   right++;
  }
  else if (abs(arr[left]-x) == abs(arr[right]-x))
  {
   re[*returnSize] = arr[left];
   (*returnSize)++;
   left--;
  }
  cnt++;
  //fprintf(stdout,"%d %d cnt=%d\n",left,right,cnt);
   
}

//bubble sort
for (int i=k-1; i>=0; i--)
{
    for (int j=0; j<=i-1; j++)
    {
        if (re[j] > re[j+1])
        {
            int temp = re[j];
            re[j] = re[j+1];
            re[j+1] = temp;
        }//if
    }//for
}//for

return re;
}