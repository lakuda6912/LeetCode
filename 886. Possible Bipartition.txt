#include <stdio.h>

bool dfs(int i, int color, int* colors, int** graph, int n)
{
  colors[i] = color;
  for (int j=0; j<n; j++)
  {
    if (graph[i][j] == 1)
    {
      if (colors[j] == color)
       return false;
      else if ((colors[j] == 0) && (!dfs(j,-color,colors,graph,n))) 
       return false;
    }
  }
  return true;
}

bool possibleBipartition(int n, int** dislikes, int dislikesSize, int* dislikesColSize){

int** graph = calloc(n, sizeof(int*));
for (int i=0; i<n; i++)
 graph[i] = calloc(n, sizeof(int));
for (int i=0; i<dislikesSize; i++)
{
  graph[dislikes[i][0]-1][dislikes[i][1]-1] = 1;
  graph[dislikes[i][1]-1][dislikes[i][0]-1] = 1;
}

int* colors = calloc(n, sizeof(int));
for (int i=0; i<n; i++)
 if ((colors[i] == 0) && (!dfs(i, 1, colors, graph, n)))
  return false;

return true;

}