#include <stdio.h>
#define MAX 30000

// Creating a stack
struct stack {
  int items[MAX];
  int top;
};

struct stack* createEmptyStack() {
  struct stack* st = malloc(sizeof(struct stack));
  st->top = -1;
  return st;
}

// Add elements into stack
void push(struct stack *st, int item) {
    st->top++;
    st->items[st->top] = item;
}

// Remove element from stack
int pop(struct stack *st) {
    int re = st->items[st->top];
    st->top--;
    return re;
}

// Check if the stack is empty
int isEmpty(struct stack *st) {
  if (st->top == -1)
    return 1;
  else
    return 0;
}

/*
void logStack(struct stack* st)
{
  for (int i=0; i<=st->top; i++)
  {
    fprintf(stdout,"%d ",st->items[i]);
  }
  fprintf(stdout,"\n");
}
*/

int longestValidParentheses(char * s){

if (s == NULL)
 return 0;

struct stack* st = createEmptyStack();
push(st, -1);

int maxLen = 0;
for (int i=0; i<strlen(s); i++)
{
  if (s[i] == '(')
   push(st,i);
  else
  {
    pop(st);
    if (isEmpty(st))
     push(st,i);
    else
    {
      int len = i - st->items[st->top];
      if (len > maxLen)
       maxLen = len;
    } 
  } 
}


return maxLen;

}