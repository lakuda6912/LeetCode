class DSU:
    def __init__(self,N):
      self.par = list(range(N))
      self.rank = [1]*N

    def find(self, p):
      if self.par[p] != p:
       return self.find(self.par[p])
      return p 

    def union(self, n1, n2):
      p1, p2 = self.find(n1), self.find(n2)
      if p1 == p2:
        return False
      if self.rank[p1] > self.rank[p2]:
        self.par[p2] = p1
        self.rank[p1] += self.rank[p2]
      else: 
        self.par[p1] = p2
        self.rank[p2] += self.rank[p1]        
      return True  

class Solution(object):
    def possibleBipartition(self, n, dislikes):
        """
        :type n: int
        :type dislikes: List[List[int]]
        :rtype: bool
        """
        UF = DSU(n+1)

        graph = defaultdict(list)
        #print(dislikes)
        for i, j in dislikes:
            graph[i].append(j)
            graph[j].append(i)
        #print(graph)

        for i, j in graph.items():
          for k in j:
            if UF.find(i) == UF.find(k):
              return False
            UF.union(j[0],k)

        return True

