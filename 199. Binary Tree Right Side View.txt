/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#define MAX_SIZE 100
#define OVERFLOW_VALUE 200
struct queue 
{
  struct TreeNode* items[MAX_SIZE];
  int front;
  int rear;
};//struct queue

struct queue* createQueue(void)
{
 struct queue* q = malloc(sizeof(struct queue));
 q->front = -1;
 q->rear = -1;
 return q;
}//struct Queue* CreatQueue

// Check if the queue is empty
bool isEmpty(struct queue* q) 
{
  if (q->rear == -1)
    return true;
  else
    return false;
}

//Check queue size
int queueSize(struct queue* q)
{
  return (q->rear - q->front + 1);
}

// Adding elements into queue
bool enqueue(struct queue* q, struct TreeNode* node) 
{
  bool flag = false;
  if (q->rear == MAX_SIZE - 1)
    flag = false;
  else 
  {
    if (q->front == -1)
      q->front = 0;
    q->rear++;
    q->items[q->rear] = node; //check
    flag = true;
  }//else
  return flag;
}

// Removing elements from queue
struct TreeNode* dequeue(struct queue* q) 
{
  struct TreeNode* node;
  if (isEmpty(q)) 
  {
    node = NULL;
  } 
  else 
  {
    node = q->items[q->front];
    q->front++;
    if (q->front > q->rear) 
    {
      q->front = q->rear = -1;
    }
  }//else
  return node;
}

int* rightSideView(struct TreeNode* root, int* returnSize){

int *returnValue = malloc(sizeof(int) * 100);
*returnSize = 0;

//Empty tree
if (root == NULL)
{
 return NULL;
}//if

//Create queue
struct queue* q = createQueue();
enqueue(q, root);

struct TreeNode* node;
int value;
int size;
int index = 0;
while (!isEmpty(q))
{
  size = queueSize(q);
  returnValue[index++] = q->items[q->rear]->val;
  *returnSize = index;

  for (int i=0; i<size; i++)
  {
    node = dequeue(q);
    if (node->left != NULL)
     enqueue(q, node->left);
    if (node->right != NULL)
     enqueue(q, node->right); 
  }//for

}//while (!isEmpty(q))

return returnValue;
}