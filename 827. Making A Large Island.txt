#include <stdio.h>
#define MAX(a,b) ((a>b)?(a):(b))
void dfs(int** grid, int m, int n, int r, int c, int id, int* area)
{
   if ( (r < 0) || (r > m-1) || (c < 0 ) || (c > n-1) || (grid[r][c] != 1) )
    return;

   grid[r][c] = id;
   (*area)++;
   dfs(grid,m,n,r+1,c,id,area);
   dfs(grid,m,n,r-1,c,id,area);
   dfs(grid,m,n,r,c+1,id,area);
   dfs(grid,m,n,r,c-1,id,area);
}


int largestIsland(int** grid, int gridSize, int* gridColSize){

int n = gridSize;

if (n == 1)
  return 1; 

int id = 0;
int* area = calloc(n*n, sizeof(int));
for (int i=0; i<n; i++)
{
    for (int j=0; j<n; j++)
    {
        if (grid[i][j] == 1)
        {
            id--;
            //area = 0;
            dfs(grid,n,n,i,j,id,&area[-id]);
            fprintf(stdout,"id=%d area=%d\n",id,area[-id]);
        }
     }
}

//dump
/*
fprintf(stdout,"grid:\n");
for (int i=0; i<n; i++)
{
    for (int j=0; j<n; j++)
     fprintf(stdout,"%d ",grid[i][j]);
    fprintf(stdout,"\n"); 
}
*/

int max = 0;
int final = 0;
fprintf(stdout,"---------->\n");
for (int i=0; i<n; i++)
{
    for (int j=0; j<n; j++)
    {
        if (grid[i][j] == 0)
        {
          max = 0;
          int var[4] = {0,0,0,0};  
          if ((i-1 >= 0) && (grid[i-1][j] != 0))
          {
            //fprintf(stdout,"%d %d\n",grid[i-1][j],area[-grid[i-1][j]]);
            var[0] = -grid[i-1][j];
            max += area[var[0]];
          }
           
          if ((i+1 <= n-1) && (grid[i+1][j] != 0))
          {
            //fprintf(stdout,"%d %d\n",grid[i+1][j],area[-grid[i+1][j]]);
            if (-grid[i+1][j] != var[0])
            {
              var[1] = -grid[i+1][j];  
              max += area[var[1]];     
            }
          }
               
          if ((j-1 >= 0) && (grid[i][j-1] != 0))
          {
            //fprintf(stdout,"%d %d\n",grid[i][j-1],area[-grid[i][j-1]]);
            if ((-grid[i][j-1] != var[0]) && (-grid[i][j-1] != var[1]))
            {
              var[2] = -grid[i][j-1];  
              max += area[var[2]];                     
            }
          }
           
          if ((j+1 <= n-1) && (grid[i][j+1] != 0))
          {
            //fprintf(stdout,"%d %d\n",grid[i][j+1],area[-grid[i][j+1]]);        
            if ((-grid[i][j+1] != var[0]) && (-grid[i][j+1] != var[1]) && (-grid[i][j+1] != var[2]))
            {
              var[3] = -grid[i][j+1];  
              max += area[var[3]];                     
            }            
          }

          final = MAX(final, max+1);
        }
    }
}


for (int i=0; i<-id+1; i++)
{
  final = MAX(final,area[i]);   
}

//fprintf(stdout,"final=%d\n",final);  

return final;
}