#include <stdio.h>
#define SIZE 100
struct queue {
    int node[SIZE];
    int front;
    int rear;
};

struct queue* createQueue(void)
{
  struct queue *q = malloc(sizeof(struct queue));
  q->front = q->rear = -1;
  return q;
}

bool isEmpty(struct queue* q)
{
    if (q->rear == -1)
     return true;
    else
     return false; 
}

int queueSize(struct queue* q)
{
    return (q->rear - q->front + 1);
}

void enqueue(struct queue* q, int node)
{
  q->rear++;
  q->node[q->rear] = node;
  if (q->front == -1)
   q->front = 0;
}

int dequeue(struct queue* q)
{
  struct TreeNode* node = q->node[q->front];
  q->front++; 
  if (q->front > q->rear)
   q->front = q->rear = -1;
  return node; 
}

void dump(int* data, int len)
{
    for (int i=0; i<len; i++)
     fprintf(stdout,"%d ",data[i]);
    fprintf(stdout,"\n"); 
}

bool bfs(int** graph, int m, int* colors, struct queue* q, int i)
{
   if (colors[i] == 0)
   {
     colors[i] = -1;
   }

   enqueue(q,i);

   while (!isEmpty(q))
   {
     int j = dequeue(q);
     for (int k=0; k<m; k++)
     {
         if (graph[j][k] == 1)
         {
           if (colors[j] == colors[k])
           {
              return false;
           }
           else if (colors[k] == 0)
           {
              colors[k] = -colors[j];
              enqueue(q ,k); 
           }
         }
     }
   }

   //fprintf(stdout,"odd:\n");
   //dump(odd, graphSize);
   //fprintf(stdout,"queue:\n");
   //dump(q->node,queueSize(q));

   return true;
}



bool isBipartite(int** graph, int graphSize, int* graphColSize){

int m = graphSize;
int n = *graphColSize;

int** grid = calloc(m, sizeof(int*));
for (int i=0; i<m; i++)
 grid[i] = calloc(m, sizeof(int));

for (int i=0; i<m; i++)
{
    for (int j=0; j<graphColSize[i]; j++)
    {
       grid[i][graph[i][j]] = 1;
       grid[graph[i][j]][i] = 1;
    }
}

int* colors = calloc(m, sizeof(int));
struct queue* q = createQueue();

for (int i=0; i<m; i++)
{
    if (!bfs(grid, m, colors, q, i))
      return false;
}

return true;

}