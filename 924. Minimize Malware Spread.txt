#include <stdio.h>
#define MAX(a,b) ((a>b)?(a):(b))
#define MIN(a,b) ((a>b)?(b):(a))

int find(int* par, int n)
{
  if (par[n] != n)
   return find(par, par[n]);  

  return n;
}

bool union_(int* rank, int* par, int n1, int n2)
{
    int p1 = find(par, n1);
    int p2 = find(par, n2);

    if (p1 == p2)
     return false;

    if (rank[p1] >= rank[p2])
    {
        par[p2] = p1;
        rank[p1] += rank[p2];
    }
    else
    {
        par[p1] = p2;
        rank[p2] += rank[p1]; 
    }
    return true;
}

int minMalwareSpread(int** graph, int graphSize, int* graphColSize, int* initial, int initialSize){


int n = graphSize;
int* par = calloc(n,sizeof(int));
for (int i=0; i<n; i++)
 par[i] = i;
int* rank = calloc(n,sizeof(int));
for (int i=0; i<n; i++)
 rank[i] = 1;

for (int r=0; r<n; r++)
{
  for (int c=0; c<n; c++)
  {
    if (graph[r][c] == 1)
    {
      union_(rank, par, r, c);
    }
  }
}

/*
fprintf(stdout,"par: ");
for (int i=0; i<n; i++)
 fprintf(stdout,"%d ",par[i]);
fprintf(stdout,"\n");

fprintf(stdout,"rank: ");
for (int i=0; i<n; i++)
 fprintf(stdout,"%d ",rank[i]);
fprintf(stdout,"\n");
*/

int* areas = calloc(n, sizeof(int));
for (int i=0; i<n; i++)
 areas[find(par,i)]++;// = rank[find(par,i)];

/*
fprintf(stdout,"areas: ");
for (int i=0; i<n; i++)
 fprintf(stdout,"%d ",areas[i]);
fprintf(stdout,"\n"); 

fprintf(stdout,"malware: ");
*/

int* malware = calloc(n, sizeof(int));
for (int i=0; i<initialSize; i++)
{
   malware[find(par,initial[i])]++;// = rank[find(par,initial[i])];
}

/*
fprintf(stdout,"malware: ");
for (int i=0; i<n; i++)
{
   fprintf(stdout,"%d ",malware[i]);
}
fprintf(stdout,"\n");
*/

int maxArea = 0;
int* var = calloc(n, sizeof(int));
int varCnt = 0;
int index = n+1;
for (int i=0; i<initialSize; i++)
{
  if (malware[find(par,initial[i])] == 1)
  {
    if (rank[find(par,initial[i])] > maxArea)
    {
      maxArea = rank[find(par,initial[i])];
      varCnt = 0;
      var[varCnt++] = initial[i];
    }
    else if (rank[find(par,initial[i])] == maxArea)
    {
      var[varCnt++] = initial[i];
    }

    //fprintf(stdout,"!!! %d\n",initial[i]);
  }
  
}
for (int i=0; i<varCnt; i++)
  index = MIN(index,var[i]);

if (index == n+1)
{
  for (int i=0; i<initialSize; i++)
   index = MIN(index,initial[i]);
}

return index;

}