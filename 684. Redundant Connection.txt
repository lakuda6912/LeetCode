#include <stdio.h>
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int find(int* par, int n)
{
  int p = par[n];

  while (p != par[p])
  {
      par[p] = par[par[p]];
      p = par[p];
  }
  return p;
}

bool union_(int* rank, int* par, int n1, int n2)
{
    int p1 = find(par, n1);
    int p2 = find(par, n2);

    if (p1 == p2)
     return false;

    if (rank[p1] > rank[p2])
    {
        par[p2] = p1;
        rank[p1] += rank[p2];
    }
    else
    {
        par[p1] = p2;
        rank[p2] += rank[p1]; 
    }
    return true;
}

int* findRedundantConnection(int** edges, int edgesSize, int* edgesColSize, int* returnSize){

//fprintf(stdout,"%d %d\n",edges[1][0],edges[1][1]);
//fprintf(stdout,"%d\n",edgesSize);
//fprintf(stdout,"%d\n",*edgesColSize);

int* par = calloc(edgesSize+1, sizeof(int));
for (int i=0; i<edgesSize+1; i++)
 par[i] = i;
int* rank = calloc(edgesSize+1, sizeof(int));
for (int i=0; i<edgesSize+1; i++)
 rank[i] = 1;

*returnSize = 2;
int** re = calloc(1,sizeof(int*));
re[0] = calloc(2,sizeof(int));
for (int i=0; i<edgesSize; i++)
{
    if (union_(rank,par,edges[i][0],edges[i][1]) == false)
    {
      re[0][0] = edges[i][0];
      re[0][1] = edges[i][1];
    }
}
return re[0];

}