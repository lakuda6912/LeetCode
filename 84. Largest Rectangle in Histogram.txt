#include <stdio.h>
#define MAX_ITEMS 100000
#define MAX(a,b) ((a>b)?(a):(b))
// Creating a stack
struct stack {
  int index[MAX_ITEMS];
  int height[MAX_ITEMS];
  int top;
};

struct stack* createEmptyStack() {
  struct stack* st = malloc(sizeof(struct stack));
  //for (int i=0; i<MAX_ITEMS; i++)
  // st->items[i] = calloc(2,sizeof(int));
  st->top = -1;
  return st;
}

// Check if the stack is full
bool isfull(struct stack *st) {
  if (st->top == MAX_ITEMS - 1)
    return true;
  else
    return false;
}

// Check if the stack is empty
bool isempty(struct stack *st) {
  if (st->top == -1)
    return true;
  else
    return false;
}

// Add elements into stack
void push(struct stack *st, int index, int height) {
  //if (isfull(st)) {
  //  fprintf(stdout,"STACK FULL\n");
  //} 
  //else 
  {
    st->top++;
    st->index[st->top] = index;
    st->height[st->top] = height;
  }
}

// Remove element from stack
void pop(struct stack *st, int* index, int* height) {
  //if (isempty(st)) {
  //  fprintf(stdout,"STACK EMPTY \n");
  //} 
  //else 
  {
    //int** re = st->items[st->top];
    //fprintf(stdout,"Item popped= %d\n", re);
    *index = st->index[st->top];
    *height = st->height[st->top];
    st->top--;
    //return re;
  }
  //return NULL;
}

void dumpStack(struct stack *st)
{
    //fprintf(stdout,"index height\n");
    for (int i=0; i<=st->top; i++)
     fprintf(stdout,"  %d     %d\n",st->index[i],st->height[i]);
}

int largestRectangleArea(int* heights, int heightsSize){


struct stack* st = createEmptyStack();

int indx, h;
int maxArea = 0;
for (int i=0; i<heightsSize; i++)
{
    fprintf(stdout,"i=%d\n",i);
    int start = i;
    while (!isempty(st))
    {
      if (heights[i] < st->height[st->top])
      {
        pop(st,&indx,&h);
        maxArea = MAX(maxArea, (i-indx)*h);
        start = indx;
      }
      else
       break;
    }
    push(st, start, heights[i]);
    //dumpStack(st);
    //fprintf(stdout,"maxArea = %d\n",maxArea);
}


while(!isempty(st))
{
  pop(st,&indx,&h);
  maxArea = MAX(maxArea, (heightsSize-indx)*h);
}


return maxArea;
}