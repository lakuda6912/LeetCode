/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

struct queue
{
  struct TreeNode* node[2000];
  int front;
  int rear;
};

struct queue* createQueue(void)
{
  struct queue* q = malloc(sizeof(struct queue));
  q->front = q->rear = -1;
  return q;
}

bool isEmpty(struct queue* q)
{
  if (q->rear == -1)
   return true;
  else
   return false; 
}

int queueSize(struct queue* q)
{
  return (q->rear - q->front + 1);
}

void enqueue(struct queue* q, struct TreeNode* node)
{
  q->rear++;
  q->node[q->rear] = node;
  if (q->front == -1)
   q->front = 0;
}

struct TreeNode* dequeue(struct queue* q)
{
  struct TreeNode* node = q->node[q->front];
  q->front++;
  if (q->front > q->rear)
   q->front = q->rear = -1;
  return node; 
}

int** levelOrderBottom(struct TreeNode* root, int* returnSize, int** returnColumnSizes){

if (root == NULL)
{
 *returnSize = 0;
 *returnColumnSizes = NULL;
 return NULL;
}    

*returnSize = 0;
*returnColumnSizes = (int *)malloc(sizeof(int *) * 2000);
int** returnValue = (int *)malloc(sizeof(int *) * 2000);
struct queue* q = createQueue();
enqueue(q, root);

struct TreeNode* node;
while (!isEmpty(q))
{
 int size = queueSize(q);
 (*returnColumnSizes)[*returnSize] = size;
 returnValue[*returnSize] = (int *)malloc(sizeof(int) * size);

 for (int i=0; i<size; i++)
 {
    node = dequeue(q);
    returnValue[*returnSize][i] = node->val;
    if (node->left != NULL)
    {
      enqueue(q, node->left);
    }
    if (node->right != NULL)
    {
      enqueue(q, node->right);
    }    
 }//for
 (*returnSize)++;

}//while

int temp1;
int* temp2;
for (int i=0; i<(*returnSize)/2; i++)
{
 temp1 = (*returnColumnSizes)[i];
 (*returnColumnSizes)[i] = (*returnColumnSizes)[(*returnSize)-i-1];
 (*returnColumnSizes)[(*returnSize)-i-1] = temp1;

 temp2 = returnValue[i];
 returnValue[i] = returnValue[(*returnSize)-i-1];
 returnValue[(*returnSize)-i-1] = temp2;
}//for

return returnValue;
}